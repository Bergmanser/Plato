import ContainerBlot from 'parchment/dist/src/blot/abstract/container';
import FormatBlot from 'parchment/dist/src/blot/abstract/format';
import LeafBlot from 'parchment/dist/src/blot/abstract/leaf';
import ScrollBlot from 'parchment/dist/src/blot/scroll';
import InlineBlot from 'parchment/dist/src/blot/inline';
import BlockBlot from 'parchment/dist/src/blot/block';
import EmbedBlot from 'parchment/dist/src/blot/embed';
import TextBlot from 'parchment/dist/src/blot/text';
import Attributor from 'parchment/dist/src/attributor/attributor';
import ClassAttributor from 'parchment/dist/src/attributor/class';
import StyleAttributor from 'parchment/dist/src/attributor/style';
import AttributorStore from 'parchment/dist/src/attributor/store';
import * as Registry from 'parchment/dist/src/registry';
declare let Parchment: {
    Scope: typeof Registry.Scope;
    create: typeof Registry.create;
    find: typeof Registry.find;
    query: typeof Registry.query;
    register: typeof Registry.register;
    Container: typeof ContainerBlot;
    Format: typeof FormatBlot;
    Leaf: typeof LeafBlot;
    Embed: typeof EmbedBlot;
    Scroll: typeof ScrollBlot;
    Block: typeof BlockBlot;
    Inline: typeof InlineBlot;
    Text: typeof TextBlot;
    Attributor: {
        Attribute: typeof Attributor;
        Class: typeof ClassAttributor;
        Style: typeof StyleAttributor;
        Store: typeof AttributorStore;
    };
};
export default Parchment;
